-- LAB | SQL Joins
USE sakila;

-- 1. List the number of films per category.
	select fc.category_id as category, count(f.film_id) as films
	from film as f
	join film_category as fc on f.film_id = fc.film_id
    group by category
    order by films desc;
    
-- 2. Retrieve the store ID, city, and country for each store.
	select st.store_id, ci.city, co.country
    from store as st
    join address as ad on st.address_id=ad.address_id
    join city as ci on ad.city_id=ci.city_id
    join country as co on ci.country_id=co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars.
	select st.store_id as store, round(sum(p.amount)) as revenue from payment as p
	join customer as c on p.customer_id=c.customer_id
	join store as st on c.store_id=st.store_id
	group by store;
    
-- 4. Determine the average running time of films for each category.
	SELECT ca.name as film_categ, round(avg(fi.length)) as 'avg.duration'
	FROM film as fi
    JOIN film_category as fc on fi.film_id=fc.film_id
	JOIN category AS ca ON fc.category_id=ca.category_id
    group by film_categ
    ORDER BY 'avg.duration' DESC;
    
-- Bonus:
-- 5. Identify the film categories with the longest average running time.
	SELECT ca.name as film_categ, round(avg(fi.length)) as 'avg.duration'
	FROM film as fi
    JOIN film_category as fc on fi.film_id=fc.film_id
	JOIN category AS ca ON fc.category_id=ca.category_id
    group by film_categ
    ORDER BY 'avg.duration' DESC
    limit 1;
        
-- 6. Display the top 10 most frequently rented movies in descending order.
	SELECT f.title as movie, count(rental_id) as frequency
    from rental as r
    join inventory as i on r.inventory_id=i.inventory_id
    join film as f on i.film_id=f.film_id
    group by f.title
    order by frequency desc
    limit 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
	select i.store_id, f.title, count(i.inventory_id) AS inventory
	from inventory as i
	join film as f on i.film_id=f.film_id
	where f.title LIKE '%ACADEMY DINOSAUR%'
	GROUP BY i.store_id, f.title;
    -- Answer: yes, there are 4 items of this film in the inventory of Store 1

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."